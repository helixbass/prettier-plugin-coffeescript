// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow_function_expression.coffee 1`] = `
((a) => {}).length
typeof (() => {})
export default (() => {})()
(() => {})()''
(() => {})''
new (() => {})
if (if (() => {}) then 1 else 0) then ;
a = () => ({} instanceof a)
a = () => ({} && a)
a = () => ({} && a && b)
a = () => ({} + a)
a = () => ({}.b && a)
a = () => ({}[b] && a)
a = () => ({} = 0)
a = () => ({}; a)
(a) => a instanceof {}
a = (b) => c
(x) => (y = z)
(x) => (y += z)
f((a) => ({})) + 1
((a) => ({})) || 0
a = (b) => c
a = (b) =>
  return c
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
((a) => {}).length
typeof => {}
export default (=> {})()
(=> {})()''
(=> {})''
new (=> {})()
if (if => {} then 1 else 0)
  ;
a = => {} instanceof a
a = => {} && a
a = => {} && a && b
a = => {} + a
a = => {}.b && a
a = => {}[b] && a
a = => {} = 0
a = => ({}; a)
(a) => a instanceof {}
a = (b) => c
(x) => y = z
(x) => y += z
f((a) => {}) + 1
((a) => {}) || 0
a = (b) => c
a = (b) =>
  return c

`;

exports[`call.coffee 1`] = `
Seq(typeDef.interface.groups).forEach((group) =>
  Seq(group.members).forEach((member, memberName) =>
    markdownDoc(
      member.doc,
      {
        typePath: typePath.concat(memberName.slice(1)),
        signatures: member.signatures
      }
    )
  )
)

promiseFromCallback = (fn) =>
  new Promise((resolve, reject) =>
    fn((err, result) =>
      if (err) then return reject(err)
      return resolve(result)
    )
  )

runtimeAgent.getProperties(
  objectId,
  false, # ownProperties
  false, # accessorPropertiesOnly
  false, # generatePreview
  (error, properties, internalProperties) =>
    return 1
)

render = ->
  return (
    <View>
      <Image
        onProgress={(e) => this.setState({progress: Math.round(100 * e.nativeEvent.loaded / e.nativeEvent.total)})}
      />
    </View>
  )

render = ->
  (
    <View>
      <Image
        onProgress={(e) =>
          this.setState({
            progress: Math.round(
              100 * e.nativeEvent.loaded / e.nativeEvent.total,
            ),
          })}
      />
    </View>
  )

render = ->
  return (
    <View>
      <Image
        onProgress={(e) =>
          this.setState({
            progress: Math.round(
              100 * e.nativeEvent.loaded / e.nativeEvent.total,
            ),
          })}
      />
    </View>
  )

jest.mock(
  '../SearchSource',
  () => class
    findMatchingTests: (pattern) ->
      return {paths: []}
)

foooooooooooooooooooooooooooooooooooooo((action) => (next) =>
    dispatch(action)
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Seq(typeDef.interface.groups).forEach (group) =>
  Seq(group.members).forEach (member, memberName) =>
    markdownDoc member.doc,
      typePath: typePath.concat memberName.slice 1
      signatures: member.signatures

promiseFromCallback = (fn) =>
  new Promise (resolve, reject) =>
    fn (err, result) =>
      if err then return reject err
      return resolve result

runtimeAgent.getProperties(
  objectId
  false # ownProperties
  false # accessorPropertiesOnly
  false # generatePreview
  (error, properties, internalProperties) =>
    return 1
)

render = ->
  return (
    <View>
      <Image
        onProgress={(e) =>
          this.setState
            progress: Math.round(
              (100 * e.nativeEvent.loaded) / e.nativeEvent.total
            )
        }
      />
    </View>
  )

render = ->
  <View>
    <Image
      onProgress={(e) =>
        this.setState
          progress: Math.round(
            (100 * e.nativeEvent.loaded) / e.nativeEvent.total
          )
      }
    />
  </View>

render = ->
  return (
    <View>
      <Image
        onProgress={(e) =>
          this.setState
            progress: Math.round(
              (100 * e.nativeEvent.loaded) / e.nativeEvent.total
            )
        }
      />
    </View>
  )

jest.mock '../SearchSource', =>
  class
    findMatchingTests: (pattern) ->
      return paths: []

foooooooooooooooooooooooooooooooooooooo (action) => (next) =>
  dispatch action

`;

exports[`comment.coffee 1`] = `
###*
# Curried function that ends with a BEM CSS Selector
#
# @param {String} block - the BEM Block you'd like to select.
# @returns {Function}
###
export bem = (block) =>
  ###*
  # @param {String} [element] - the BEM Element within that block; if undefined, selects the block itself.
  # @returns {Function}
  ###
  (element) =>
    ###*
    # @param {?String} [modifier] - the BEM Modifier for the Block or Element; if undefined, selects the Block or Element unmodified.
    # @returns {String}
    ###
    (modifier) =>
      [
        ".",
        css(block),
        if element then "__#{css(element)}" else ""
        if modifier then "--#{css(modifier)}" else ""
      ].join("")

<FlatList
  renderItem={(
    info, # $FlowExpectedError - bad widgetCount type 6, should be Object
  ) => <span>{info.item.widget.missingProp}</span>}
  data={data}
/>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###*
# Curried function that ends with a BEM CSS Selector
#
# @param {String} block - the BEM Block you'd like to select.
# @returns {Function}
###
export bem = (block) =>
  ###*
  # @param {String} [element] - the BEM Element within that block; if undefined, selects the block itself.
  # @returns {Function}
  ###
  (element) =>
    ###*
    # @param {?String} [modifier] - the BEM Modifier for the Block or Element; if undefined, selects the Block or Element unmodified.
    # @returns {String}
    ###
    (modifier) =>
      [
        '.'
        css block
        if element then "__#{css element}" else ''
        if modifier then "--#{css modifier}" else ''
      ].join ''

<FlatList
  renderItem={(
    info # $FlowExpectedError - bad widgetCount type 6, should be Object
  ) => <span>{info.item.widget.missingProp}</span>}
  data={data}
/>

`;

exports[`currying.coffee 1`] = `
fn = (b) => (c) => (d) =>
  return 3

foo = (a, b) => (c) => (d) =>
  return 3

bar = (a) => (b) => (c) => a + b + c

mw = (store) => (next) => (action) =>
  return next(action)

middleware = (options) => (req, res, next) =>
  # ...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fn = (b) => (c) => (d) =>
  return 3

foo = (a, b) => (c) => (d) =>
  return 3

bar = (a) => (b) => (c) => a + b + c

mw = (store) => (next) => (action) =>
  return next action

middleware = (options) => (req, res, next) =>
  # ...

`;

exports[`long-call-no-args.coffee 1`] = `
veryLongCall(VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_LONG_CONSTANT, () => {})
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
veryLongCall(
  VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_LONG_CONSTANT
,
  => {}
)

`;

exports[`long-contents.coffee 1`] = `
foo = () =>
  expect(arg1, arg2, arg3).toEqual({message: 'test', messageType: 'SMS', status: 'Unknown', created: '11/01/2017 13:36'})
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
foo = =>
  expect(arg1, arg2, arg3).toEqual
    message: 'test'
    messageType: 'SMS'
    status: 'Unknown'
    created: '11/01/2017 13:36'

`;

exports[`parens.coffee 1`] = `
promise.then(
  (result) => result,
  (err) => err
)

promise.then(
  (result) => f(); return result
  (err) => f(); return err
)

foo((a) => b)
foo((a) => return b)
foo(c, (a) => b)
foo(c, ((a) => b), d)
foo(((a) => b), d)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
promise.then ((result) => result), (err) => err

promise.then(
  (result) =>
    f()
    return result
,
  (err) =>
    f()
    return err
)

foo (a) => b
foo (a) => return b
foo c, (a) => b
foo c, ((a) => b), d
foo ((a) => b), d

`;

exports[`short_body.coffee 1`] = `
initializeSnapshotState = (
  testFile,
  update,
  testPath,
  expandLongerLongerLongerLonger,
) => new SnapshotState(testFile, update, testPath, expand)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
initializeSnapshotState = (
  testFile
  update
  testPath
  expandLongerLongerLongerLonger
) => new SnapshotState testFile, update, testPath, expand

`;
