// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assignment-pattern.coffee 1`] = `
{ a ### comment ### = 1 } = b

{ c = 1 ### comment ### } = d

{a = #comment
 b} = c
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{ a ### comment ### = 1 } = b

{ c = 1 ### comment ### } = d

{
  a = b #comment
} = c

`;

exports[`before-comma.coffee 1`] = `
foo = {
  a: 'a' ### comment for this line ###,

  ### Section B ###
  b: 'b',
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
foo =
  a: 'a' ### comment for this line ###

  ### Section B ###
  b: 'b'

`;

exports[`blank.coffee 1`] = `
# This file only
# has comments. This comment
# should still exist
#
# when printed.

###*
# @typedef {DataDrivenMapping|ConstantMapping} Mapping
###
###*
# @typedef {Object.<String, Mapping>} ConfigurationMapping
###

###*
# @typedef {Function} D3Scale - a D3 scale
# @property {Function} ticks
# @property {Function} tickFormat
###
# comment

# comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This file only
# has comments. This comment
# should still exist
#
# when printed.

###*
# @typedef {DataDrivenMapping|ConstantMapping} Mapping
###
###*
# @typedef {Object.<String, Mapping>} ConfigurationMapping
###

###*
# @typedef {Function} D3Scale - a D3 scale
# @property {Function} ticks
# @property {Function} tickFormat
###
# comment

# comment

`;

exports[`break-continue-statements.coffee 1`] = `
loop
  break ### comment ###
  continue ### comment ###
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
loop
  break ### comment ###
  continue ### comment ###

`;

exports[`call_comment.coffee 1`] = `
render( # Warm any cache
  <ChildUpdates renderAnchor={true} anchorClassOn={true} />,
  container
)

React.render( # Warm any cache
  <ChildUpdates renderAnchor={true} anchorClassOn={true} />,
  container
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
render(
  # Warm any cache
  <ChildUpdates renderAnchor={true} anchorClassOn={true} />
  container
)

React.render(
  # Warm any cache
  <ChildUpdates renderAnchor={true} anchorClassOn={true} />
  container
)

`;

exports[`closure-compiler-type-cast.coffee 1`] = `
# test to make sure comments are attached correctly
inlineComment = ### some comment ### (
  someReallyLongFunctionCall(withLots, ofArguments))

object = {
  key: ### some comment ### (someReallyLongFunctionCall(withLots, ofArguments))
}

# preserve parens only for type casts
assignment = ###* @type {string} ### (getValue())

functionCall(1 + ###* @type {string} ### (value), ###* @type {!Foo} ### ({}))

returnValue = ->
  return ###* @type {!Array.<string>} ### (['hello', 'you'])
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# test to make sure comments are attached correctly
inlineComment = ### some comment ### someReallyLongFunctionCall(
  withLots
  ofArguments
)

object =
  key: ### some comment ### someReallyLongFunctionCall withLots, ofArguments

# preserve parens only for type casts
assignment = ###* @type {string} ### getValue()

functionCall 1 + ###* @type {string} ### value, ###* @type {!Foo} ### {}

returnValue = ->
  return ###* @type {!Array.<string>} ### ['hello', 'you']

`;

exports[`dangling.coffee 1`] = `
x = {### dangling ###}
x = {
  # dangling
}
x = [### dangling ###]
x = ->
  ### dangling ###
class Foo extends Qux
  ### dangling ###
export ### dangling ###{}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
x = {
  ### dangling ###
}
x = {
  # dangling
}
x = [
  ### dangling ###
]
x = ->
  ### dangling ###
class Foo extends Qux
### dangling ###
export ### dangling ###{}

`;

exports[`dangling_array.coffee 1`] = `
expect(() => {}).toTriggerReadyStateChanges([
  # Nothing.
])

[1 ### first comment ###, 2 ### second comment ###, 3]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
expect(=> {}).toTriggerReadyStateChanges [
  # Nothing.
]

[1 ### first comment ###, 2 ### second comment ###, 3]

`;

exports[`export.coffee 1`] = `
export ### comment ### {}

export {
  foo # comment
}

export {
  # comment
  bar
}

export {
  fooo, # comment
  barr, # comment
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export ### comment ###{}

export {
  foo # comment
}

export {
  # comment
  bar
}

export {
  fooo # comment
  barr # comment
}

`;

exports[`first-line.coffee 1`] = `
a # comment
b
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a # comment
b

`;

exports[`function-declaration.coffee 1`] = `
a = (### comment ###) -> # comment
b = -> # comment
c = (### comment ### argA, argB, argC) -> # comment
call((###object### row) => {})
KEYPAD_NUMBERS.map((num) => ( # Buttons 0-9
  <div />
))

f = ### f ###() ->
f = (### args ###) ->
f = () ### returns ### ->
f = ### f ###(### args ###) ### returns ### ->

f = ### f ###(### a ### a) ->
f = ### f ###(a ### a ###) ->
f = ### f ###(### a ### a) ### returns ### ->

obj = {
  f1: ### f ###() ->
  f2: (### args ###) ->
  f3: () ### returns ### ->
  f4: ### f ###(### args ###) ### returns ### ->
}

(### f ###() ->)()
((### args ###) ->)()
(() ### returns ### ->)()
(### f ###(### args ###) ### returns ### ->)()

class C
  f: ### f ###() ->
class C
  f: (### args ###) ->
class C
  f: () ### returns ### ->
class C
  f: ### f ###(### args ###) ### returns ### ->
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a = (### comment ###) -> # comment
b = -> # comment
c = (### comment ### argA, argB, argC) -> # comment
call (###object### row) => {}
KEYPAD_NUMBERS.map (num) =>
  # Buttons 0-9
  <div />

f = ### f ### ->
f = (### args ###) ->
f = () ### returns ### ->
f = ### f ### (### args ###) ### returns ### ->

f = ### f ### (### a ### a) ->
f = ### f ### (a ### a ###) ->
f = ### f ### (### a ### a) ### returns ### ->

obj =
  f1: ### f ### ->
  f2: (### args ###) ->
  f3: () ### returns ### ->
  f4: ### f ### (### args ###) ### returns ### ->

### f ### (->)()
((### args ###) ->)()
(() ### returns ### ->)()
### f ### ((### args ###) ### returns ### ->)()

class C
  f: ### f ### () ->
class C
  f: (### args ###) ->
class C
  f: () ### returns ### ->
class C
  f: ### f ### (### args ###) ### returns ### ->

`;

exports[`if.coffee 1`] = `
if (1)
# comment
  false
# comment
else if (2)
  true
# multi
# ple
# lines
else if (3)
  # existing comment
  true
# okay?
else if (4)
  # empty with existing comment
# comment
else ;

if (5) # comment
  true

if (6) # comment
  true
else if (7) # comment
  true
else # comment
  true

if (8) # comment
# comment
  true
else if (9) # comment
# comment
  true
else # comment
# comment
  true

if (10) ### comment ### # comment
  true
else if (11) ### comment ###
  true
else if (12) # comment ### comment ### # comment
  true
else if (13) ### comment ### ### comment ### # comment
  true
else ### comment ###
  true

if (14) # comment
### comment ###
# comment
  true
else if (15) # comment
### comment ###
### comment ### # comment
  true
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if 1
  # comment
  false
# comment
else if 2
  true
# multi
# ple
# lines
else if 3
  # existing comment
  true
# okay?
else if 4
  # empty with existing comment
# comment
else

if 5
  # comment
  true

if 6
  # comment
  true
else if 7
  # comment
  true
else
  # comment
  true

if 8
  # comment
  # comment
  true
else if 9
  # comment
  # comment
  true
else
  # comment
  # comment
  true

if 10
  ### comment ### # comment
  true
else if 11
  ### comment ###
  true
else if 12
  # comment ### comment ### # comment
  true
else if 13
  ### comment ### ### comment ### # comment
  true
else
  ### comment ###
  true

if 14
  # comment
  ### comment ###
  # comment
  true
else if 15
  # comment
  ### comment ###
  ### comment ### # comment
  true

`;

exports[`inline-leading-expression-statement.coffee 1`] = `
do -> ### a ### b; c

do -> ### a ### b ### d ###; c
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
do ->
  ### a ###
  b
  c

do ->
  ### a ###
  b ### d ###
  c

`;

exports[`issues.coffee 1`] = `
# Does not need to break as it fits in 80 columns
this.call(a, ### comment ### b)

f = (
  someReallyLongArgument,
  someReallyLongArgument2,
  # Trailing comment should stay after
) ->

# Comments should either stay at the end of the line or always before, but
# not one before and one after.
throw new ProcessSystemError({
  code: acc.error.code, # Alias of errno
  originalError: acc.error, # Just in case.
})

# Missing one level of indentation because of the comment
rootEpic = (actions, store) => (
  combineEpics(...epics)(actions, store)
    # Log errors and continue.
    .catch((err, stream) =>
      getLogger().error(err)
      return stream
    )
)

# optional trailing comma gets moved all the way to the beginning
regex = new RegExp(
  '^\\\\s*' + # beginning of the line
  'name\\\\s*=\\\\s*' + # name =
  '[\\'"]' + # opening quotation mark
  escapeStringRegExp(target.name) + # target name
  '[\\'"]' + # closing quotation mark
  ',?$', # optional trailing comma
)

# The comment is moved and doesn't trigger the eslint rule anymore
import path from 'path' # eslint-disable-line nuclide-internal/prefer-nuclide-uri

# Comments disappear in-between MemberExpressions
Observable.of(process)
  # Don't complete until we say so!
  .merge(Observable.never())
  # Get the errors.
  .takeUntil(if throwOnError then errors.flatMap(Observable.throw) else errors)
  .takeUntil(exit)

# Comments disappear inside of JSX
<div>
  {### Some comment ###}
</div>

# Comments in JSX tag are placed in a non optimal way
<div
  # comment
/>

# Comments disappear in empty blocks
if (1)
  # Comment
else

# Comments trigger invalid JavaScript in-between else if
if (1)
# Comment
else

# The comment makes the line break in a weird way
result = asyncExecute('non_existing_command', ### args ### [])

# The closing paren is printed on the same line as the comment
foo({}
  # Hi
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Does not need to break as it fits in 80 columns
this.call a, ### comment ### b

f = (
  someReallyLongArgument
  someReallyLongArgument2
  # Trailing comment should stay after
) ->

# Comments should either stay at the end of the line or always before, but
# not one before and one after.
throw new ProcessSystemError(
  code: acc.error.code # Alias of errno
  originalError: acc.error # Just in case.
)

# Missing one level of indentation because of the comment
rootEpic = (actions, store) =>
  combineEpics(...epics) actions, store
    # Log errors and continue.
    .catch (err, stream) =>
      getLogger().error err
      return stream

# optional trailing comma gets moved all the way to the beginning
regex = new RegExp(
  '^\\\\s*' + # beginning of the line
  'name\\\\s*=\\\\s*' + # name =
  '[\\'"]' + # opening quotation mark
  escapeStringRegExp(target.name) + # target name
  '[\\'"]' + # closing quotation mark
    ',?$' # optional trailing comma
)

# The comment is moved and doesn't trigger the eslint rule anymore
import path from 'path' # eslint-disable-line nuclide-internal/prefer-nuclide-uri

# Comments disappear in-between MemberExpressions
Observable.of process
  # Don't complete until we say so!
  .merge Observable.never()
  # Get the errors.
  .takeUntil if throwOnError then errors.flatMap Observable.throw else errors
  .takeUntil exit

# Comments disappear inside of JSX
<div>{### Some comment ###}</div>

# Comments in JSX tag are placed in a non optimal way
<div
# comment
/>

# Comments disappear in empty blocks
if 1
  # Comment
else

# Comments trigger invalid JavaScript in-between else if
if 1
# Comment
else

# The comment makes the line break in a weird way
result = asyncExecute 'non_existing_command', ### args ### []

# The closing paren is printed on the same line as the comment
foo(
  {}
  # Hi
)

`;

exports[`jsx.coffee 1`] = `
<div>
  {
    ### comment ###
  }
</div>

<div>
  {### comment ###
  }
</div>

<div>
  {### comment
###
  }
</div>

<div>
  {a### comment
###
  }
</div>

<div>
  {### comment
###
  a
  }
</div>

<div>
  {### comment ###
  }
</div>

<div>
  {### comment ###}
</div>

<div>
  {
    # single line comment
  }
</div>

<div>
  {
    # multiple line comments 1
    # multiple line comments 2
  }
</div>

<div>
  {
    # multiple mixed comments 1
    ### multiple mixed comments 2 ###
    ### multiple mixed comments 3 ###
    # multiple mixed comments 4
  }
</div>

<div>
  {
    # Some very v  ery very very merry (xmas) very very long line to break line width limit
  }
</div>

<div>{###<div>  Some very v  ery very very long line to break line width limit </div>###}</div>

<div>
  {###*
  # JSDoc-y comment in JSX. I wonder what will happen to it?
 ###}
</div>

<div>
  {
    ###*
  # Another JSDoc comment in JSX.
 ###
  }
</div>

<div
  ###*
# Handles clicks.
###
  onClick={() => {}}>

</div>

<div
  # comment
>
  {foo}
</div>

<div
  className="foo" # comment
>
  {foo}
</div>

<div
  className="foo"
  # comment
>
  {foo}
</div>

<div # comment
  id="foo"
>
  {children}
</div>

<Wrapper>
  {}
  <Component />
</Wrapper>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div>{### comment ###}</div>

<div>{### comment ###}</div>

<div>
  {### comment
  ###}
</div>

<div>
  {
    a ### comment
    ###
  }
</div>

<div>
  {
    ### comment
    ###
    a
  }
</div>

<div>{### comment ###}</div>

<div>{### comment ###}</div>

<div>
  {
    # single line comment
  }
</div>

<div>
  {
    # multiple line comments 1
    # multiple line comments 2
  }
</div>

<div>
  {
    # multiple mixed comments 1
    ### multiple mixed comments 2 ###
    ### multiple mixed comments 3 ###
    # multiple mixed comments 4
  }
</div>

<div>
  {
    # Some very v  ery very very merry (xmas) very very long line to break line width limit
  }
</div>

<div>
  {###<div>  Some very v  ery very very long line to break line width limit </div>###}
</div>

<div>
  {###*
  # JSDoc-y comment in JSX. I wonder what will happen to it?
  ###}
</div>

<div>
  {###*
  # Another JSDoc comment in JSX.
  ###}
</div>

<div
  ###*
  # Handles clicks.
  ###
  onClick={=> {}}
/>

<div
# comment
>
  {foo}
</div>

<div
  className="foo" # comment
>
  {foo}
</div>

<div
  className="foo"
  # comment
>
  {foo}
</div>

<div # comment
  id="foo"
>
  {children}
</div>

<Wrapper>
  {}
  <Component />
</Wrapper>

`;

exports[`last-arg.coffee 1`] = `
f = (
  currentRequest,
  # TODO this is a very very very very long comment that makes it go > 80 columns
) => {}

class X
  f: (
    currentRequest,
    # TODO this is a very very very very long comment that makes it go > 80 columns
  ) ->

f = (
  a
  # some comment here
) ->
  return a + 1

x =
  getSectionMode: (
    pageMetaData
    sectionMetaData
    ### $FlowFixMe This error was exposed while converting keyMirror
     * to keyMirrorRecursive ###
  ) ->

class X
  getSectionMode: (
    pageMetaData,
    sectionMetaData = ['unknown'],
    ### $FlowFixMe This error was exposed while converting keyMirror
     * to keyMirrorRecursive ###
  ) ->

class Foo
  a: (lol ###string###) ->

  b: (lol ###string###
  ) ->

  d: (
    lol ###string###,
    lol2 ###string###,
    lol3 ###string###,
  ) ->

  d: (
    lol ###string###,
    lol2 ###string###,
    lol3 ###string###,
    lol4 ###string###
  ) ###string### ->

  # prettier-ignore
  c: (lol ###string###
  ) ->

  # prettier-ignore
  d: (
    lol ###string###,
    lol2 ###string###,
    lol3 ###string###,
    lol4 ###string###
  ) ->

  # prettier-ignore
  e: (
    lol ###string###,
    lol2 ###string###,
    lol3 ###string###,
    lol4 ###string###
  ) -> ### string###
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f = (
  currentRequest
  # TODO this is a very very very very long comment that makes it go > 80 columns
) => {}

class X
  f: (
    currentRequest
    # TODO this is a very very very very long comment that makes it go > 80 columns
  ) ->

f = (
  a
  # some comment here
) ->
  return a + 1

x =
  getSectionMode: (
    pageMetaData
    sectionMetaData
    ### $FlowFixMe This error was exposed while converting keyMirror
    * to keyMirrorRecursive ###
  ) ->

class X
  getSectionMode: (
    pageMetaData
    sectionMetaData = ['unknown']
    ### $FlowFixMe This error was exposed while converting keyMirror
    * to keyMirrorRecursive ###
  ) ->

class Foo
  a: (lol ###string###) ->

  b: (lol ###string###) ->

  d: (lol ###string###, lol2 ###string###, lol3 ###string###) ->

  d: (
    lol ###string###
    lol2 ###string###
    lol3 ###string###
    lol4 ###string###
  ) ###string### ->

  # prettier-ignore
  c: (lol ###string###) ->

  # prettier-ignore
  d: (
    lol ###string###
    lol2 ###string###
    lol3 ###string###
    lol4 ###string###
  ) ->

  # prettier-ignore
  e: (
    lol ###string###
    lol2 ###string###
    lol3 ###string###
    lol4 ###string###
  ) -> ### string###

`;

exports[`preserve-new-line-last.coffee 1`] = `
f = ->
  a
  ### eslint-disable ###

f = ->
  a

  ### eslint-disable ###

name = ->
  # comment1
  func1()

  # comment2
  func2()

  # comment3 why func3 commented
  # func3()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f = ->
  a
  ### eslint-disable ###

f = ->
  a

  ### eslint-disable ###

name = ->
  # comment1
  func1()

  # comment2
  func2()

  # comment3 why func3 commented
  # func3()

`;

exports[`return-statement.coffee 1`] = `
jsx = ->
  return (
    # Comment
    <div />
  )

unary = ->
  return (
    # Comment
    !!x
  )

numericLiteralNoParen = ->
  return 1337 # Comment

logical = ->
  return (
    # Reason for 42
    42
  ) && 84

binary = ->
  return (
    # Reason for 42
    42
  ) * 84

binaryInBinaryLeft = ->
  return (
    # Reason for 42
    42
  ) * 84 + 2

binaryInBinaryRight = ->
  return (
    # Reason for 42
    42
  ) + 84 * 2

conditional = ->
  return if (
    # Reason for 42
    42
  ) then 1 else 2

binaryInConditional = ->
  return if (
    # Reason for 42
    42
  ) * 3 then 1 else 2

call = ->
  return (
    # Reason for a
    a
  )()

memberInside = ->
  return (
    # Reason for a.b
    a.b
  ).c

memberOutside = ->
  return (
    # Reason for a
    a
  ).b.c

memberInAndOutWithCalls = ->
  return (
    # Reason for a
    aFunction.b()
  ).c.d()

excessiveEverything = ->
  return (
    # Reason for stuff
    if a.b() * 3 + 4 then if (a"hi"; 1) then 1 else 1 else 1
  )

# See https://github.com/prettier/prettier/issues/2392
# function sequenceExpression() {
#   return (
#     // Reason for a
#     a
#   ), b
# }

sequenceExpressionInside = ->
  return ( # Reason for a
    a; b
  )

taggedTemplate = ->
  return (
    # Reason for a
    a
  )"b"

inlineComment = ->
  return (
    ### hi ### 42
  ) || 42
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
jsx = ->
  return (
    # Comment
    <div />
  )

unary = ->
  return (
    # Comment
    !!x
  )

numericLiteralNoParen = ->
  return 1337 # Comment

logical = ->
  return (
    # Reason for 42
    42 && 84
  )

binary = ->
  return (
    # Reason for 42
    42 * 84
  )

binaryInBinaryLeft = ->
  return (
    # Reason for 42
    42 *
      84 +
    2
  )

binaryInBinaryRight = ->
  return (
    # Reason for 42
    42 +
    84 * 2
  )

conditional = ->
  return (
    if (
      # Reason for 42
      42
    )
      1
    else
      2
  )

binaryInConditional = ->
  return (
    if (
      # Reason for 42
      42 * 3
    )
      1
    else
      2
  )

call = ->
  return (
    # Reason for a
    a()
  )

memberInside = ->
  return (
    # Reason for a.b
    a.b.c
  )

memberOutside = ->
  return (
    # Reason for a
    a.b.c
  )

memberInAndOutWithCalls = ->
  return (
    aFunction
      .b()
      # Reason for a
      .c.d()
  )

excessiveEverything = ->
  return (
    # Reason for stuff
    (if a.b() * 3 + 4 then if (a"hi"; 1) then 1 else 1 else 1)
  )

# See https://github.com/prettier/prettier/issues/2392
# function sequenceExpression() {
#   return (
#     // Reason for a
#     a
#   ), b
# }

sequenceExpressionInside = ->
  return (
    # Reason for a
    (a; b)
  )

taggedTemplate = ->
  return (
    # Reason for a
    a"b"
  )

inlineComment = ->
  return ### hi ### 42 || 42

`;

exports[`switch.coffee 1`] = `
switch node && node.type
  when "Property", "MethodDefinition"
    prop = node.key

  when "MemberExpression"
    prop = node.property

  # no default

switch foo
  when "bar"
    doThing()

  # no default

switch foo
  when "bar" #comment
    doThing() #comment

  when "baz"
    doOtherThing() #comment

switch foo
  when "bar"
    doThing()
  #comment

  when "baz"
    doThing()
  #comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
switch node && node.type
  when 'Property', 'MethodDefinition'
    prop = node.key

  when 'MemberExpression'
    prop = node.property

  # no default

switch foo
  when 'bar'
    doThing()

  # no default

switch foo
  when 'bar' #comment
    doThing() #comment

  when 'baz'
    doOtherThing() #comment

switch foo
  when 'bar'
    doThing()
  #comment

  when 'baz'
    doThing()
  #comment

`;

exports[`template-literal.coffee 1`] = `
"
#{a # comment
}

#{b ### comment ###}

#{### comment ### c ### comment ###}

#{# comment
d #comment
};
"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"
#{
  a # comment
}

#{b ### comment ###}

#{### comment ### c ### comment ###}

#{
  # comment
  d #comment
};
"

`;

exports[`trailing-jsdocs.coffee 1`] = `
CONNECTION_STATUS = exports.CONNECTION_STATUS = {
  CLOSED: Object.freeze({ kind: 'CLOSED' }),
  CONNECTED: Object.freeze({ kind: 'CONNECTED' }),
  CONNECTING: Object.freeze({ kind: 'CONNECTING' }),
  NOT_CONNECTED: Object.freeze({ kind: 'NOT_CONNECTED' }) }

### A comment ### ###*
# A type that can be written to a buffer.
### ###*
# Describes the connection status of a ReactiveSocket/DuplexConnection.
# - NOT_CONNECTED: no connection established or pending.
# - CONNECTING: when \`connect()\` has been called but a connection is not yet
#   established.
# - CONNECTED: when a connection is established.
# - CLOSED: when the connection has been explicitly closed via \`close()\`.
# - ERROR: when the connection has been closed for any other reason.
### ###*
# A contract providing different interaction models per the [ReactiveSocket protocol]
# (https://github.com/ReactiveSocket/reactivesocket/blob/master/Protocol.md).
### ###*
# A single unit of data exchanged between the peers of a \`ReactiveSocket\`.
###
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CONNECTION_STATUS = exports.CONNECTION_STATUS =
  CLOSED: Object.freeze kind: 'CLOSED'
  CONNECTED: Object.freeze kind: 'CONNECTED'
  CONNECTING: Object.freeze kind: 'CONNECTING'
  NOT_CONNECTED: Object.freeze kind: 'NOT_CONNECTED'

### A comment ###
###*
# A type that can be written to a buffer.
###
###*
# Describes the connection status of a ReactiveSocket/DuplexConnection.
# - NOT_CONNECTED: no connection established or pending.
# - CONNECTING: when \`connect()\` has been called but a connection is not yet
#   established.
# - CONNECTED: when a connection is established.
# - CLOSED: when the connection has been explicitly closed via \`close()\`.
# - ERROR: when the connection has been closed for any other reason.
###
###*
# A contract providing different interaction models per the [ReactiveSocket protocol]
# (https://github.com/ReactiveSocket/reactivesocket/blob/master/Protocol.md).
###
###*
# A single unit of data exchanged between the peers of a \`ReactiveSocket\`.
###

`;

exports[`try.coffee 1`] = `
# comment 1
try
  # comment 2
# comment 3
catch e
  # comment 4
# comment 5
finally # comment 6
  # comment 7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# comment 1
try
  # comment 2
catch e
  # comment 3
  # comment 4
finally
  # comment 5
  # comment 6
  # comment 7

`;

exports[`variable_declarator.coffee 1`] = `
obj = # Comment
{
  key: 'val'
}

obj = { # Comment
  key: 'val'
}

obj = {
  # Comment
  key: 'val'
}

obj = # Comment
[
  'val'
]

obj = [ # Comment
  'val'
]

obj = [
  # Comment
  'val'
]

obj = # Comment
"val"

obj = # Comment
"
val
val
"

obj = # Comment
tag"val"

obj = # Comment
tag"
val
val
"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
obj =
  # Comment
  key: 'val'

obj =
  # Comment
  key: 'val'

obj =
  # Comment
  key: 'val'

obj =
  # Comment
  ['val']

obj = [
  # Comment
  'val'
]

obj = [
  # Comment
  'val'
]

obj =
  # Comment
  'val'

obj =
  # Comment
  '
val
val
'

obj =
  # Comment
  tag"val"

obj =
  # Comment
  tag"
val
val
"

`;
