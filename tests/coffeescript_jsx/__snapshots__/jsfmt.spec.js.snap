// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`conditional-expression.coffee 1`] = `
if <div /> then jsxModeFromElementNonBreaking else 'a'

if jsxModeFromElementNonBreaking then <div /> else 'a'

if jsxModeFromElementNonBreaking then 'a' else <div />

if <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div>
  'jsx mode from element breaking'
else
  'a'

if 'jsx mode from element breaking'
  <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div>
else
  'a'

if 'jsx mode from element breaking'
  'a'
else
  <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div>

<div>
  {if a then 'a' else if b then 'b' else 'c'}
</div>

if cable then 'satellite' else if publiq then 'affairs' else if network then <span id="c" /> else 'dunno'

if cable then 'satellite' else if publiq then 'affairs' else if network then <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div> else 'dunno'

if cable then <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div> else if sateline then 'public' else if affairs then 'network' else 'dunno'

<div>
  {properties.length > 1 or (
    if properties.length is 1 and properties[0].apps.size > 1
      if not draggingApp? and not newPropertyName?
        <MigrationPropertyListItem />
      else
        <MigrationPropertyListItem apps={Immutable.List()}/>
    else null
  )}
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if <div /> then jsxModeFromElementNonBreaking else 'a'

if jsxModeFromElementNonBreaking then <div /> else 'a'

if jsxModeFromElementNonBreaking then 'a' else <div />

if (
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>
)
  'jsx mode from element breaking'
else
  'a'

if 'jsx mode from element breaking'
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>
else
  'a'

if 'jsx mode from element breaking'
  'a'
else
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>

<div>{if a then 'a' else if b then 'b' else 'c'}</div>

if cable
  'satellite'
else if publiq
  'affairs'
else if network
  <span id="c" />
else
  'dunno'

if cable
  'satellite'
else if publiq
  'affairs'
else if network
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>
else
  'dunno'

if cable
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>
else if sateline
  'public'
else if affairs
  'network'
else
  'dunno'

<div>
  {properties.length > 1 or (
    if properties.length is 1 and properties[0].apps.size > 1
      if not draggingApp? and not newPropertyName?
        <MigrationPropertyListItem />
      else
        <MigrationPropertyListItem apps={Immutable.List()} />
    else
      null
  )}
</div>

`;

exports[`expression.coffee 1`] = `
<View style={{
  someVeryLongStyle1: 'true',
  someVeryLongStyle2: 'true',
  someVeryLongStyle3: 'true',
  someVeryLongStyle4: 'true',
}} />

<View style={[{
  someVeryLongStyle1: 'true',
  someVeryLongStyle2: 'true',
  someVeryLongStyle3: 'true',
  someVeryLongStyle4: 'true',
}]} />

<Something>
  {() ->
    <SomethingElse>
      <span />
    </SomethingElse>
  }
</Something>

<Something>
  {items.map (item) ->
    <SomethingElse>
      <span />
    </SomethingElse>
  }
</Something>

<Something>
  {->
    <SomethingElse>
      <span />
    </SomethingElse>}
</Something>

<RadioListItem
  key={option}
  imageSource={this.props.veryBigItemImageSourceFunc && this.props.veryBigItemImageSourceFunc(option)}
  imageSize={this.props.veryBigItemImageSize}
  imageView={this.props.veryBigItemImageViewFunc?(option)}
  heading={this.props.displayTextFunc(option)}
  value={option}
/>

<ParentComponent prop={
  <Child>
    test
  </Child>
}/>

<BookingIntroPanel
  prop="long_string_make_to_force_break"
  logClick={(data) -> doLogClick('short', "short", data)}
/>

<BookingIntroPanel
  logClick={(data) -> doLogClick('long_name_long_name_long_name', "long_name_long_name_long_name", data)} />

<Component
  onChange={(
    key,
    value
  ) ->
    @setState updatedTask: @state.updatedTask.set key, value
  }
/>

<BookingIntroPanel>
  {(data) -> doLogClick('long_name_long_name_long_name', "long_name_long_name_long_name", data)}
</BookingIntroPanel>

<Component>
  {(
    key,
    value
  ) ->
    @setState updatedTask: @state.updatedTask.set key, value
  }
</Component>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<View
  style={
    someVeryLongStyle1: 'true'
    someVeryLongStyle2: 'true'
    someVeryLongStyle3: 'true'
    someVeryLongStyle4: 'true'
  }
/>

<View
  style={[
    someVeryLongStyle1: 'true'
    someVeryLongStyle2: 'true'
    someVeryLongStyle3: 'true'
    someVeryLongStyle4: 'true'
  ]}
/>

<Something>
  {->
    <SomethingElse>
      <span />
    </SomethingElse>
  }
</Something>

<Something>
  {items.map (item) ->
    <SomethingElse>
      <span />
    </SomethingElse>
  }
</Something>

<Something>
  {->
    <SomethingElse>
      <span />
    </SomethingElse>
  }
</Something>

<RadioListItem
  key={option}
  imageSource={
    this.props.veryBigItemImageSourceFunc &&
    this.props.veryBigItemImageSourceFunc option
  }
  imageSize={this.props.veryBigItemImageSize}
  imageView={this.props.veryBigItemImageViewFunc? option}
  heading={this.props.displayTextFunc option}
  value={option}
/>

<ParentComponent prop={<Child>test</Child>} />

<BookingIntroPanel
  prop="long_string_make_to_force_break"
  logClick={(data) -> doLogClick 'short', 'short', data}
/>

<BookingIntroPanel
  logClick={(data) ->
    doLogClick(
      'long_name_long_name_long_name'
      'long_name_long_name_long_name'
      data
    )
  }
/>

<Component
  onChange={(key, value) ->
    @setState updatedTask: @state.updatedTask.set key, value
  }
/>

<BookingIntroPanel>
  {(data) ->
    doLogClick(
      'long_name_long_name_long_name'
      'long_name_long_name_long_name'
      data
    )
  }
</BookingIntroPanel>

<Component>
  {(key, value) ->
    @setState updatedTask: @state.updatedTask.set key, value
  }
</Component>

`;

exports[`html_escape.coffee 1`] = `
export default -> <a href="https://foo.bar?q1=foo&q2=bar" />

-> <img src="https://bar.foo?param1=1&param2=2" />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export default -> <a href="https://foo.bar?q1=foo&q2=bar" />

-> <img src="https://bar.foo?param1=1&param2=2" />

`;

exports[`hug.coffee 1`] = `
<div>
  {if __DEV__
    @renderDevApp()
  else
    <div>
      {routes.map (route) ->
        <MatchAsync
          key={"#{route.to}-async"}
          pattern={route.to}
          exactly={route.to is '/'}
          getComponent={routeES6Modules[route.value]}
        />
      }
    </div>
  }
</div>

<div>
  {__DEV__ &&
    <div>
      {routes.map (route) ->
        <MatchAsync
          key={"#{route.to}-async"}
          pattern={route.to}
          exactly={route.to is '/'}
          getComponent={routeES6Modules[route.value]}
        />
      }
    </div>
  }
</div>

<div>
  {member.memberName.memberSomething +
    if member.memberDef.memberSomething.signatures then '()' else ''
  }
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div>
  {if __DEV__
    @renderDevApp()
  else
    <div>
      {routes.map (route) ->
        <MatchAsync
          key={"#{route.to}-async"}
          pattern={route.to}
          exactly={route.to is '/'}
          getComponent={routeES6Modules[route.value]}
        />
      }
    </div>
  }
</div>

<div>
  {__DEV__ &&
    <div>
      {routes.map (route) ->
        <MatchAsync
          key={"#{route.to}-async"}
          pattern={route.to}
          exactly={route.to is '/'}
          getComponent={routeES6Modules[route.value]}
        />
      }
    </div>
  }
</div>

<div>
  {member.memberName.memberSomething + (
    if member.memberDef.memberSomething.signatures
      '()'
    else
      ''
  )}
</div>

`;

exports[`logical-expression.coffee 1`] = `
<div>
  {a || 'b'}
</div>

<div>
  {a && 'b'}
</div>

<div>
  {a || <span></span>}
</div>

<div>
  {a and <span></span>}
</div>

<div>
  {if a then <span></span>}
</div>

<div>
  {<span></span> if a}
</div>

<div>
  {unless a then <span></span>}
</div>

<div>
  {<span></span> unless a}
</div>

<div>
  {a and <span>make this text just so long enough to break this to the next line</span>}
</div>

<div>
  {if a then <span>make this text just so long enough to break this to the next line</span>}
</div>

<div>
  {<span>make this text just so long enough to break this to the next line</span> if a}
</div>

<div>
  {a and b and <span>make this text just so long enough to break this to the next line</span>}
</div>

<div>
  {a and <span>
    <div>
      <div></div>
    </div>
  </span>}
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div>{a || 'b'}</div>

<div>{a && 'b'}</div>

<div>{a || <span />}</div>

<div>{a and <span />}</div>

<div>{if a then <span />}</div>

<div>{<span /> if a}</div>

<div>{unless a then <span />}</div>

<div>{<span /> unless a}</div>

<div>
  {a and
    <span>
      make this text just so long enough to break this to the next line
    </span>
  }
</div>

<div>
  {if a
    <span>
      make this text just so long enough to break this to the next line
    </span>
  }
</div>

<div>
  {<span>
    make this text just so long enough to break this to the next line
  </span> if a}
</div>

<div>
  {a and
    b and
    <span>
      make this text just so long enough to break this to the next line
    </span>
  }
</div>

<div>
  {a and
    <span>
      <div>
        <div />
      </div>
    </span>
  }
</div>

`;

exports[`object-property.coffee 1`] = `
tabs = [
  {
    title: 'General Info',
    content:
      <GeneralForm
        long-attribute="i-need-long-value-here"
        onSave={onSave}
        onCancel={onCancel}
        countries={countries} />
  }
]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tabs = [
  title: 'General Info'
  content:
    <GeneralForm
      long-attribute="i-need-long-value-here"
      onSave={onSave}
      onCancel={onCancel}
      countries={countries}
    />
]

`;

exports[`open-break.coffee 1`] = `
<td
  onClick={-> a}>{header}{showSort}</td>

<td
  onClick={
    ->
      a
      b
  }
>{header}<showSort attr="long long long long long long long long long long long long"/></td>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<td onClick={-> a}>
  {header}
  {showSort}
</td>

<td
  onClick={->
    a
    b
  }
>
  {header}
  <showSort attr="long long long long long long long long long long long long" />
</td>

`;

exports[`parens.coffee 1`] = `
a = [
  <path key='0' d='M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,' />,
  <path key='1' d='M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,' />,
]

<div {...(if foo or foo is null then {foo} else null)} />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a = [
  <path
    key="0"
    d="M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,"
  />
  <path
    key="1"
    d="M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,M13.6,10.6l,4-2.8L9.5,"
  />
]

<div {...(if foo or foo is null then { foo } else null)} />

`;

exports[`quotes.coffee 1`] = `
<div id="&quot;'<>&amp;&quot;" />
<div id='"&#39;<>&amp;&quot;' />
<div id={'\\'"&quot;<>&amp;&quot;'} />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div id="&quot;'<>&amp;&quot;" />
<div id="&quot;&#39;<>&amp;&quot;" />
<div id={'\\'"&quot;<>&amp;&quot;'} />

`;

exports[`return-statement.coffee 1`] = `
NonBreakingFunction = -> <div />

BreakingFunction = -> <div>
  <div>
    bla bla bla
  </div>
</div>

NonBreakingFunctionWExplicitReturn = -> return <div />
BreakingFunctionWExplicitReturn = ->
  return <div>
    <div>
      bla bla bla
    </div>
  </div>

class NonBreakingClass extends React.component
  render: ->
    <div />

class BreakingClass extends React.component
  render: ->
    <div>
      <div>
        bla bla bla
      </div>
    </div>

class NonBreakingClassWExplicitReturn extends React.component
  render: ->
    return <div />

class BreakingClass extends React.component
  render: ->
    return <div>
      <div>
        bla bla bla
      </div>
    </div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NonBreakingFunction = -> <div />

BreakingFunction = ->
  <div>
    <div>bla bla bla</div>
  </div>

NonBreakingFunctionWExplicitReturn = -> return <div />
BreakingFunctionWExplicitReturn = ->
  return (
    <div>
      <div>bla bla bla</div>
    </div>
  )

class NonBreakingClass extends React.component
  render: ->
    <div />

class BreakingClass extends React.component
  render: ->
    <div>
      <div>bla bla bla</div>
    </div>

class NonBreakingClassWExplicitReturn extends React.component
  render: ->
    return <div />

class BreakingClass extends React.component
  render: ->
    return (
      <div>
        <div>bla bla bla</div>
      </div>
    )

`;

exports[`spacing.coffee 1`] = `
Labels = {
  label1:
    <fbt>
      Label 1
    </fbt>

  label2:
    <fbt>
      Label 2
    </fbt>

  label3:
    <fbt>
      Label 3
    </fbt>
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Labels =
  label1:
    <fbt>Label 1</fbt>

  label2:
    <fbt>Label 2</fbt>

  label3:
    <fbt>Label 3</fbt>

`;
