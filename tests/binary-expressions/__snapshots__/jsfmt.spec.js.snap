// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow.coffee 1`] = `
f = ->
  appEntitys = getAppEntitys(loadObject).filter(
    (entity) -> entity && entity.isInstallAvailable() && !entity.isQueue() && entity.isDisabled()
  )

f = ->
  appEntitys = getAppEntitys(loadObject).map(
    entity -> entity && entity.isInstallAvailable() && !entity.isQueue() && entity.isDisabled() && {
      id: entity.id
    }
  )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f = ->
  appEntitys = getAppEntitys(loadObject).filter (entity) ->
    entity &&
    entity.isInstallAvailable() &&
    !entity.isQueue() &&
    entity.isDisabled()

f = ->
  appEntitys = getAppEntitys(loadObject).map(
    entity ->
      entity &&
      entity.isInstallAvailable() &&
      !entity.isQueue() &&
      entity.isDisabled() &&
        id: entity.id
  )

`;

exports[`bitwise-flags.coffee 1`] = `
FLAG_A = 1 << 0
FLAG_B = 1 << 1
FLAG_C = 1 << 2

all = FLAG_A | FLAG_B | FLAG_C
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FLAG_A = 1 << 0
FLAG_B = 1 << 1
FLAG_C = 1 << 2

all = FLAG_A | FLAG_B | FLAG_C

`;

exports[`comment.coffee 1`] = `
a = (
  # Comment 1
  (Math.random() * (yRange * (1 - minVerticalFraction))) + (minVerticalFraction * yRange)
) - offset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a =
  # Comment 1
  Math.random() * (yRange * (1 - minVerticalFraction)) +
  minVerticalFraction * yRange -
  offset

`;

exports[`equality.coffee 1`] = `
x == y == z
x != y == z
x == y != z
x != y != z

x is y is z
x isnt y is z
x is y isnt z
x isnt y isnt z
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
x == y == z
x != y == z
x == y != z
x != y != z

x is y is z
x isnt y is z
x is y isnt z
x isnt y isnt z

`;

exports[`exp.coffee 1`] = `
a ** b ** c
(a ** b) ** c
a.b ** c
(-a) ** b
a ** -b
-(a**b)
(a * b) ** c
a ** (b * c)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a ** (b ** c)
(a ** b) ** c
a.b ** c
(-a) ** b
a ** -b
-(a ** b)
(a * b) ** c
a ** (b * c)

`;

exports[`if.coffee 1`] = `
if this.hasPlugin("dynamicImportsLong") && this.lookahead().typeLong then ;

if @hasPlugin("dynamicImportsLonger") and @lookahead().typeLongerer is tt.parenLeft then ;

if (this.hasPlugin("dynamicImportsLong") && this.lookahead().typeLong == tt.parenLeft.right) then ;

if (VeryVeryVeryVeryVeryVeryVeryVeryLong is VeryVeryVeryVeryVeryVeryVeryVeryVeryLong) then ;

if (VeryVeryVeryVeryVeryVeryVeryVeryLong == VeryVeryVeryVeryVeryVeryVeryVeryVeryLong) then ;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if this.hasPlugin('dynamicImportsLong') && this.lookahead().typeLong
  ;

if (
  @hasPlugin('dynamicImportsLonger') and
  @lookahead().typeLongerer is tt.parenLeft
)
  ;

if (
  this.hasPlugin('dynamicImportsLong') &&
  this.lookahead().typeLong == tt.parenLeft.right
)
  ;

if (
  VeryVeryVeryVeryVeryVeryVeryVeryLong is
  VeryVeryVeryVeryVeryVeryVeryVeryVeryLong
)
  ;

if (
  VeryVeryVeryVeryVeryVeryVeryVeryLong ==
  VeryVeryVeryVeryVeryVeryVeryVeryVeryLong
)
  ;

`;

exports[`inline-jsx.coffee 1`] = `
user = renderedUser or <div><User name={@state.user.name} age={@state.user.age} /></div>

user = renderedUser || shouldRenderUser && <div><User name={this.state.user.name} age={this.state.user.age} /></div>

avatar = hasAvatar and <Gravatar user={author} size={size} />

avatar = (hasAvatar || showPlaceholder) && <Gravatar user={author} size={size} />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
user = renderedUser or
  <div>
    <User name={@state.user.name} age={@state.user.age} />
  </div>

user =
  renderedUser ||
  (shouldRenderUser &&
    <div>
      <User name={this.state.user.name} age={this.state.user.age} />
    </div>)

avatar = hasAvatar and <Gravatar user={author} size={size} />

avatar = (hasAvatar || showPlaceholder) &&
  <Gravatar user={author} size={size} />

`;

exports[`inline-object-array.coffee 1`] = `
prevState = prevState || {
  catalogs: [],
  loadState: LOADED,
  opened: false,
  searchQuery: '',
  selectedCatalog: null,
}

prevState = prevState or
  defaultState or
    catalogs: []
    loadState: LOADED
    opened: no
    searchQuery: ''
    selectedCatalog: null

prevState = prevState ||
  defaultState && {
    catalogs: [],
    loadState: LOADED,
    opened: false,
    searchQuery: '',
    selectedCatalog: null,
  }

prevState = prevState || useDefault && defaultState || {
    catalogs: [],
    loadState: LOADED,
    opened: false,
    searchQuery: '',
    selectedCatalog: null,
  }

this.steps = steps || [
  {
    name: 'mock-module',
    path: '/nux/mock-module',
  },
]

@steps = steps || checkStep && [
  name: 'mock-module'
  path: '/nux/mock-module'
]

this.steps = steps && checkStep || [
  {
    name: 'mock-module',
    path: '/nux/mock-module',
  },
]

create = ->
  result = doSomething()
  shouldReturn &&
  result.ok && {
    status: "ok",
    createdAt: result.createdAt,
    updatedAt: result.updatedAt
  }

create = ->
  result = doSomething()
  shouldReturn && result.ok && result || {
    status: "ok",
    createdAt: result.createdAt,
    updatedAt: result.updatedAt
  }

obj = {
  state: shouldHaveState &&
    stateIsOK && {
      loadState: LOADED,
      opened: no
    },
  loadNext: stateIsOK && hasNext || {
      skipNext: yes
    },
  loaded: yes
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
prevState = prevState ||
  catalogs: []
  loadState: LOADED
  opened: false
  searchQuery: ''
  selectedCatalog: null

prevState = prevState or
  defaultState or
    catalogs: []
    loadState: LOADED
    opened: no
    searchQuery: ''
    selectedCatalog: null

prevState =
  prevState ||
  (defaultState &&
    catalogs: []
    loadState: LOADED
    opened: false
    searchQuery: ''
    selectedCatalog: null
  )

prevState = prevState ||
  (useDefault && defaultState) ||
    catalogs: []
    loadState: LOADED
    opened: false
    searchQuery: ''
    selectedCatalog: null

this.steps = steps || [
  name: 'mock-module'
  path: '/nux/mock-module'
]

@steps =
  steps ||
  (checkStep && [
    name: 'mock-module'
    path: '/nux/mock-module'
  ])

this.steps = (steps && checkStep) || [
  name: 'mock-module'
  path: '/nux/mock-module'
]

create = ->
  result = doSomething()
  shouldReturn &&
    result.ok &&
      status: 'ok'
      createdAt: result.createdAt
      updatedAt: result.updatedAt

create = ->
  result = doSomething()
  (shouldReturn && result.ok && result) ||
    status: 'ok'
    createdAt: result.createdAt
    updatedAt: result.updatedAt

obj =
  state: shouldHaveState &&
    stateIsOK &&
      loadState: LOADED
      opened: no
  loadNext: (stateIsOK && hasNext) ||
    skipNext: yes
  loaded: yes

`;

exports[`jsx_parent.coffee 1`] = `
<div
  src={
    !isJellyfishEnabled &&
    diffUpdateMessageInput != null &&
    this.state.isUpdateMessageEmpty
  }
/>

<div>
  {not isJellyfishEnabled and
    diffUpdateMessageInput != null and
    @state.isUpdateMessageEmpty}
</div>

<div
  style={
    !isJellyfishEnabled &&
    diffUpdateMessageInput && {
      fontSize: 14,
      color: '#fff'
    }
  }
/>

<div>
  {!isJellyfishEnabled &&
    diffUpdateMessageInput != null && <div><span>Text</span></div>}
</div>

<div>
  {!isJellyfishEnabled &&
    diffUpdateMessageInput != null && child || <div><span>Text</span></div>}
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div
  src={
    !isJellyfishEnabled &&
    diffUpdateMessageInput != null &&
    this.state.isUpdateMessageEmpty
  }
/>

<div>
  {not isJellyfishEnabled and
    diffUpdateMessageInput != null and
    @state.isUpdateMessageEmpty
  }
</div>

<div
  style={
    !isJellyfishEnabled &&
    diffUpdateMessageInput && {
      fontSize: 14
      color: '#fff'
    }
  }
/>

<div>
  {!isJellyfishEnabled &&
    diffUpdateMessageInput != null &&
    <div>
      <span>Text</span>
    </div>
  }
</div>

<div>
  {(!isJellyfishEnabled && diffUpdateMessageInput != null && child) ||
    <div>
      <span>Text</span>
    </div>
  }
</div>

`;

exports[`math.coffee 1`] = `
x + y / z
x / y + z

x * y % z
x / y % z
x % y * z
x % y / z

x % y % z

x << y >> z
x >>> y << z
x >>> y >>> z
x + y >> z

x | y & z
x & y | z
x ^ y ^ z
x & y & z
x | y | z
x & y >> z
x << y | z
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
x + y / z
x / y + z

(x * y) % z
(x / y) % z
(x % y) * z
(x % y) / z

(x % y) % z

(x << y) >> z
(x >>> y) << z
(x >>> y) >>> z
(x + y) >> z

x | (y & z)
(x & y) | z
x ^ y ^ z
x & y & z
x | y | z
x & (y >> z)
(x << y) | z

`;

exports[`return.coffee 1`] = `
foo = ->
  return this.hasPlugin("dynamicImports") && this.lookahead().type is tt.parenLeft.right

foo = ->
  return if @hasPlugin("dynamicImports") and @lookahead().type is tt.parenLeft.right.left.right then yes else no

foo = ->
  return if this.calculate().compute().first.numberOfThings > this.calculate().compute().last.numberOfThings then true else false
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
foo = ->
  return (
    this.hasPlugin('dynamicImports') &&
    this.lookahead().type is tt.parenLeft.right
  )

foo = ->
  return (
    if (
      @hasPlugin('dynamicImports') and
      @lookahead().type is tt.parenLeft.right.left.right
    )
      yes
    else
      no
  )

foo = ->
  return (
    if (
      this.calculate().compute().first.numberOfThings >
      this.calculate().compute().last.numberOfThings
    )
      true
    else
      false
  )

`;

exports[`short-right.coffee 1`] = `
this._cumulativeHeights &&
 Math.abs(
   this._cachedItemHeight(this._firstVisibleIndex + i) -
     this._provider.fastHeight(i + this._firstVisibleIndex),
 ) >
   1

foooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(
  aaaaaaaaaaaaaaaaaaa
) +
  a

isPartOfPackageJSON = dependenciesArray.indexOf(
  dependencyWithOutRelativePath.split('/')[0],
) != -1

defaultContent.filter((defaultLocale) ->
  # ...
)[0] || null
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
this._cumulativeHeights &&
  Math.abs(
    this._cachedItemHeight(this._firstVisibleIndex + i) -
      this._provider.fastHeight i + this._firstVisibleIndex
  ) > 1

foooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(
  aaaaaaaaaaaaaaaaaaa
) + a

isPartOfPackageJSON =
  dependenciesArray.indexOf(dependencyWithOutRelativePath.split('/')[0]) != -1

defaultContent.filter((defaultLocale) ->
  # ...
)[0] || null

`;

exports[`shouldnt-break-right.coffee 1`] = `
somethingRatherLongOnTheLeftSide and [anArray, that, has, many, elements, indeed]

somethingRatherLongOnTheLeftSide not in [anArray, that, has, many, elements, indeed]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
somethingRatherLongOnTheLeftSide and [
  anArray
  that
  has
  many
  elements
  indeed
]

somethingRatherLongOnTheLeftSide not in [
  anArray
  that
  has
  many
  elements
  indeed
]

`;

exports[`test.coffee 1`] = `
# It should always break the highest precedence operators first, and
# break them all at the same time.

x = longVariable + longVariable + longVariable
x = longVariable + longVariable + longVariable + longVariable - longVariable + longVariable
x = longVariable + longVariable * longVariable + longVariable - longVariable + longVariable
x = longVariable + longVariable * longVariable * longVariable / longVariable + longVariable

x = longVariable && longVariable && longVariable && longVariable && longVariable && longVariable
x = longVariable && longVariable || longVariable && longVariable || longVariable && longVariable
x = firstItemWithAVeryLongNameThatKeepsGoing || firstItemWithAVeryLongNameThatKeepsGoing || {}
x = firstItemWithAVeryLongNameThatKeepsGoing || firstItemWithAVeryLongNameThatKeepsGoing || []
x = call(firstItemWithAVeryLongNameThatKeepsGoing, firstItemWithAVeryLongNameThatKeepsGoing) || []

x = longVariable * longint && longVariable >> 0 && longVariable + longVariable

x = longVariable > longint && longVariable is 0 + longVariable * longVariable

foo(if obj.property * new Class() && obj instanceof Class && longVariable then number + 5 else false)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# It should always break the highest precedence operators first, and
# break them all at the same time.

x = longVariable + longVariable + longVariable
x =
  longVariable +
  longVariable +
  longVariable +
  longVariable -
  longVariable +
  longVariable
x =
  longVariable +
  longVariable * longVariable +
  longVariable -
  longVariable +
  longVariable
x =
  longVariable +
  (longVariable * longVariable * longVariable) / longVariable +
  longVariable

x =
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable
x =
  (longVariable && longVariable) ||
  (longVariable && longVariable) ||
  (longVariable && longVariable)
x =
  firstItemWithAVeryLongNameThatKeepsGoing ||
  firstItemWithAVeryLongNameThatKeepsGoing ||
  {}
x =
  firstItemWithAVeryLongNameThatKeepsGoing ||
  firstItemWithAVeryLongNameThatKeepsGoing ||
  []
x =
  call(
    firstItemWithAVeryLongNameThatKeepsGoing
    firstItemWithAVeryLongNameThatKeepsGoing
  ) || []

x = longVariable * longint && longVariable >> 0 && longVariable + longVariable

x = longVariable > longint && longVariable is 0 + longVariable * longVariable

foo(
  if obj.property * new Class() && obj instanceof Class && longVariable
    number + 5
  else
    false
)

`;

exports[`unary.coffee 1`] = `
anyTestFailures = !(
  aggregatedResults.numFailedTests == 0 &&
  aggregatedResults.numRuntimeErrorTestSuites == 0
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
anyTestFailures = !(
  aggregatedResults.numFailedTests == 0 &&
  aggregatedResults.numRuntimeErrorTestSuites == 0
)

`;
