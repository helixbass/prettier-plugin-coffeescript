// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functional_compose.coffee 1`] = `
compose(
  sortBy((x) => x),
  flatten,
  map((x) => [x, x*2])
)

somelib.compose(
  sortBy((x) -> x),
  flatten,
  map((x) -> [x, x*2])
)

composeFlipped(
  sortBy((x) => x),
  flatten,
  map((x) => [x, x*2])
)

somelib.composeFlipped(
  sortBy((x) => x),
  flatten,
  map((x) => [x, x*2])
)

hasValue = hasOwnProperty(a, b)

this.compose(sortBy((x) => x), flatten)
@a.b.c.compose(sortBy((x) => x), flatten)
someObj.someMethod(@field.compose(a, b))

class A extends B
  compose: ->
    super.compose(sortBy((x) => x), flatten)

@subscriptions.add(
            @componentUpdates
                .pipe(startWith(@props), distinctUntilChanged(isEqual))
                .subscribe (props) ->
        )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compose(
  sortBy (x) => x
  flatten
  map (x) => [x, x * 2]
)

somelib.compose(
  sortBy (x) -> x
  flatten
  map (x) -> [x, x * 2]
)

composeFlipped(
  sortBy (x) => x
  flatten
  map (x) => [x, x * 2]
)

somelib.composeFlipped(
  sortBy (x) => x
  flatten
  map (x) => [x, x * 2]
)

hasValue = hasOwnProperty a, b

this.compose(
  sortBy (x) => x
  flatten
)
@a.b.c.compose(
  sortBy (x) => x
  flatten
)
someObj.someMethod(
  @field.compose(
    a
    b
  )
)

class A extends B
  compose: ->
    super.compose(
      sortBy (x) => x
      flatten
    )

@subscriptions.add(
  @componentUpdates
    .pipe(
      startWith @props
      distinctUntilChanged isEqual
    )
    .subscribe (props) ->
)

`;

exports[`gobject_connect.coffee 1`] = `
button.connect(
  "clicked",
  () => doSomething()
)
app.connect(
  "activate",
  () =>
    await data.load()
    win.show_all()
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
button.connect 'clicked', => doSomething()
app.connect 'activate', =>
  await data.load()
  win.show_all()

`;

exports[`lodash_flow.coffee 1`] = `
import { flow } from "lodash"

foo = flow(
  (x) => x + 1,
  (x) => x * 3,
  (x) => x - 6,
)

foo(6)

import * as _ from "lodash"

foo = _.flow(
  (x) => x + 1,
  (x) => x * 3,
  (x) => x - 6,
)

foo(6)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import { flow } from 'lodash'

foo = flow(
  (x) => x + 1
  (x) => x * 3
  (x) => x - 6
)

foo 6

import * as _ from 'lodash'

foo = _.flow(
  (x) => x + 1
  (x) => x * 3
  (x) => x - 6
)

foo 6

`;

exports[`lodash_flow_right.coffee 1`] = `
import { flowRight } from "lodash"

foo = flowRight(
  (x) => x + 1,
  (x) => x * 3,
  (x) => x - 6,
)

foo(6)

import * as _ from "lodash"

foo = _.flowRight(
  (x) => x + 1,
  (x) => x * 3,
  (x) => x - 6,
)

foo(6)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import { flowRight } from 'lodash'

foo = flowRight(
  (x) => x + 1
  (x) => x * 3
  (x) => x - 6
)

foo 6

import * as _ from 'lodash'

foo = _.flowRight(
  (x) => x + 1
  (x) => x * 3
  (x) => x - 6
)

foo 6

`;

exports[`mongo_connect.coffee 1`] = `
MongoClient.connect(
  "mongodb://localhost:27017/posts",
  (err, db) =>
    assert.equal(null, err)
    db.close()
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MongoClient.connect 'mongodb://localhost:27017/posts', (err, db) =>
  assert.equal null, err
  db.close()

`;

exports[`ramda_compose.coffee 1`] = `
classyGreeting = (firstName, lastName) =>
  "The name's " + lastName + ", " + firstName + " " + lastName
yellGreeting = R.compose(R.toUpper, classyGreeting)
yellGreeting("James", "Bond") #=> "THE NAME'S BOND, JAMES BOND"

R.compose(Math.abs, R.add(1), R.multiply(2))(-4) #=> 7

#  get :: String -> Object -> Maybe *
get = R.curry((propName, obj) => Maybe(obj[propName]))

#  getStateCode :: Maybe String -> Maybe String
getStateCode = R.composeK(
  R.compose(Maybe.of, R.toUpper),
  get("state"),
  get("address"),
  get("user")
)
getStateCode({ user: { address: { state: "ny" } } }) #=> Maybe.Just("NY")
getStateCode({}) #=> Maybe.Nothing()

db = {
  users: {
    JOE: {
      name: "Joe",
      followers: ["STEVE", "SUZY"]
    }
  }
}

# We'll pretend to do a db lookup which returns a promise
lookupUser = (userId) => Promise.resolve(db.users[userId])
lookupFollowers = (user) => Promise.resolve(user.followers)
lookupUser("JOE").then(lookupFollowers)

#  followersForUser :: String -> Promise [UserId]
followersForUser = R.composeP(lookupFollowers, lookupUser)
followersForUser("JOE").then((followers) => console.log("Followers:", followers))
# Followers: ["STEVE","SUZY"]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
classyGreeting = (firstName, lastName) =>
  "The name's " + lastName + ', ' + firstName + ' ' + lastName
yellGreeting = R.compose(
  R.toUpper
  classyGreeting
)
yellGreeting 'James', 'Bond' #=> "THE NAME'S BOND, JAMES BOND"

R.compose(
  Math.abs
  R.add 1
  R.multiply 2
) -4 #=> 7

#  get :: String -> Object -> Maybe *
get = R.curry (propName, obj) => Maybe obj[propName]

#  getStateCode :: Maybe String -> Maybe String
getStateCode = R.composeK(
  R.compose(
    Maybe.of
    R.toUpper
  )
  get('state')
  get('address')
  get('user')
)
getStateCode user: address: state: 'ny' #=> Maybe.Just("NY")
getStateCode {} #=> Maybe.Nothing()

db =
  users:
    JOE:
      name: 'Joe'
      followers: ['STEVE', 'SUZY']

# We'll pretend to do a db lookup which returns a promise
lookupUser = (userId) => Promise.resolve db.users[userId]
lookupFollowers = (user) => Promise.resolve user.followers
lookupUser('JOE').then lookupFollowers

#  followersForUser :: String -> Promise [UserId]
followersForUser = R.composeP(
  lookupFollowers
  lookupUser
)
followersForUser('JOE').then (followers) => console.log 'Followers:', followers
# Followers: ["STEVE","SUZY"]

`;

exports[`ramda_pipe.coffee 1`] = `
f = R.pipe(Math.pow, R.negate, R.inc)

f(3, 4) # -(3^4) + 1

#  parseJson :: String -> Maybe *
#  get :: String -> Object -> Maybe *

#  getStateCode :: Maybe String -> Maybe String
getStateCode = R.pipeK(
  parseJson,
  get("user"),
  get("address"),
  get("state"),
  R.compose(Maybe.of, R.toUpper)
)

getStateCode('{"user":{"address":{"state":"ny"}}}')
#=> Just('NY')
getStateCode("[Invalid JSON]")
#=> Nothing()

#  followersForUser :: String -> Promise [User]
followersForUser = R.pipeP(db.getUserById, db.getFollowers)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f = R.pipe(
  Math.pow
  R.negate
  R.inc
)

f 3, 4 # -(3^4) + 1

#  parseJson :: String -> Maybe *
#  get :: String -> Object -> Maybe *

#  getStateCode :: Maybe String -> Maybe String
getStateCode = R.pipeK(
  parseJson
  get('user')
  get('address')
  get('state')
  R.compose(
    Maybe.of
    R.toUpper
  )
)

getStateCode '{"user":{"address":{"state":"ny"}}}'
#=> Just('NY')
getStateCode '[Invalid JSON]'
#=> Nothing()

#  followersForUser :: String -> Promise [User]
followersForUser = R.pipeP(
  db.getUserById
  db.getFollowers
)

`;

exports[`redux_compose.coffee 1`] = `
import { createStore, applyMiddleware, compose } from 'redux'
import thunk from 'redux-thunk'
import DevTools from './containers/DevTools'
import reducer from '../reducers'

store = createStore(
  reducer,
  compose(
    applyMiddleware(thunk),
    DevTools.instrument()
  )
)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import { createStore, applyMiddleware, compose } from 'redux'
import thunk from 'redux-thunk'
import DevTools from './containers/DevTools'
import reducer from '../reducers'

store = createStore(
  reducer
  compose(
    applyMiddleware thunk
    DevTools.instrument()
  )
)

`;

exports[`redux_connect.coffee 1`] = `
ArtistInput = connect(mapStateToProps, mapDispatchToProps, mergeProps)(Component)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ArtistInput =
  connect(
    mapStateToProps
    mapDispatchToProps
    mergeProps
  ) Component

`;

exports[`reselect_createselector.coffee 1`] = `
import { createSelector } from 'reselect'

resolve = createSelector(
  getIds,
  getObjects,
  (ids, objects) => ids.map((id) => objects[id])
)

resolve = createSelector(
  [getIds, getObjects],
  (ids, objects) => ids.map((id) => objects[id])
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import { createSelector } from 'reselect'

resolve = createSelector(
  getIds
  getObjects
  (ids, objects) => ids.map (id) => objects[id]
)

resolve = createSelector(
  [getIds, getObjects]
  (ids, objects) => ids.map (id) => objects[id]
)

`;

exports[`rxjs_pipe.coffee 1`] = `
import { range } from 'rxjs/observable/range'
import { map, filter, scan } from 'rxjs/operators'

source$ = range(0, 10)

source$.pipe(
  filter((x) => x % 2 is 0),
  map((x) => x + x),
  scan(
    (acc, x) => acc + x,
    0
  )
)
.subscribe((x) => console.log(x))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import { range } from 'rxjs/observable/range'
import { map, filter, scan } from 'rxjs/operators'

source$ = range 0, 10

source$
  .pipe(
    filter (x) => (x % 2) is 0
    map (x) => x + x
    scan ((acc, x) => acc + x), 0
  )
  .subscribe (x) => console.log x

`;
