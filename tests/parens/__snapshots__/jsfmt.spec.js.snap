// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assignment-condition.coffee 1`] = `
unless aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  c

until aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  c

switch aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  when c then d

c if aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

c while aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

if (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
  b

while (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
  b

switch (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
  when b then c

b if (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)

b while (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
unless (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)
  c

until (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)
  c

switch (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)
  when c then d

c if (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)

c while (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)

if (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)
  b

while (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)
  b

switch (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)
  when b then c

b if (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)

b while (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)

`;

exports[`conditional-condition.coffee 1`] = `
if (
  if a
    b
  else
    c
)
  d

unless (if a then b)
  c

c if (
  if a
    b
)

while (
  if a
    b
  else
    c
)
  d

until (if a then b)
  c

c while (
  if a
    b
)

switch (
  if a
    b
  else
    c
)
  when d then e

switch (if a then b)
  when c then d
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (
  if a
    b
  else
    c
)
  d

unless (if a then b)
  c

c if (
  if a
    b
)

while (
  if a
    b
  else
    c
)
  d

until (if a then b)
  c

c while (
  if a
    b
)

switch (
  if a
    b
  else
    c
)
  when d then e

switch (if a then b)
  when c then d

`;

exports[`if-as-postfix-body.coffee 1`] = `
method.ctor = (if @parent then 'derived' else 'base') if methodName.value is 'constructor'

(if @parent then 'derived' else 'base') if methodName.value is 'constructor'

(if @parent then 'derived' else 'base') for a in b

(if @parent then 'derived' else 'base') while x
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method.ctor = (if @parent then 'derived' else 'base') if (
  methodName.value is 'constructor'
)

(if @parent then 'derived' else 'base') if methodName.value is 'constructor'

(if @parent then 'derived' else 'base') for a in b

(if @parent then 'derived' else 'base') while x

`;

exports[`if-call-arg.coffee 1`] = `
@tokens.splice (if @tag(i - 1) is ',' then i - 1 else i), 0, outdent
@tokens.splice 0, outdent, (if @tag(i - 1) is ',' then i - 1 else i)
@tokens.splice (if @tag(i - 1) is ',' then i - 1 else i), 0, outdent, moreLongArgs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@tokens.splice (if @tag(i - 1) is ',' then i - 1 else i), 0, outdent
@tokens.splice 0, outdent, if @tag(i - 1) is ',' then i - 1 else i
@tokens.splice(
  if @tag(i - 1) is ',' then i - 1 else i
  0
  outdent
  moreLongArgs
)

`;

exports[`spread-control-structure.coffee 1`] = `
{
  ...(
    if a
      b
  )
}

{
  ...(
    for a in b
      c
  )
}

{
  ...(
    while a
      b
  )
}

[
  ...(
    switch a
      when b then c
  )
]

{
  ...(
    try
      a
  )
}

<A {
  ...(
    if a
      b
  )
} />

<A {
  ...(
    for a in b
      c
  )
} />

<A {
  ...(
    while a
      b
  )
} />

<A {
  ...(
    switch a
      when b then c
  )
} />

<A {...(
  try
    a
)} />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  ...(
    if a
      b
  )
}

{
  ...(
    for a in b
      c
  )
}

{
  ...(
    while a
      b
  )
}

[
  ...(
    switch a
      when b then c
  )
]

{
  ...(
    try
      a
  )
}

<A
  {...(
    if a
      b
  )}
/>

<A
  {...(
    for a in b
      c
  )}
/>

<A
  {...(
    while a
      b
  )}
/>

<A
  {...(
    switch a
      when b then c
  )}
/>

<A
  {...(
    try
      a
  )}
/>

`;
