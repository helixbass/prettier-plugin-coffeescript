// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assignment-condition.coffee 1`] = `
unless aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  c

until aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  c

switch aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  when c then d

c if aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

c while aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

if (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
  b

while (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
  b

switch (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
  when b then c

b if (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)

b while (class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)

unless a = b
  c

until a = b
  c

switch a = b
  when c then d

c if a = b

c while a = b
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
unless (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)
  c

until (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)
  c

switch (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)
  when c then d

c if (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)

c while (
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
)

if (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)
  b

while (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)
  b

switch (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)
  when b then c

b if (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)

b while (
  class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
)

unless a = b
  c

until a = b
  c

switch a = b
  when c then d

c if a = b

c while a = b

`;

exports[`assignment-to-postfix-if.coffee 1`] = `
a = (b if c)

a =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb if ccccccccc

a = (b while c)

a =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb while cccccc

a = (b for b in c)

a =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb for b in ccc

a: (b if c)

BREAK

a: (b if c)
d: e

BREAK

d: e
a: (b if c)

BREAK

a:
  b if c

BREAK

a:
  b if c
d: e

BREAK

a: (b while c)

BREAK

a: (b while c)
d: e

BREAK

a:
  b while c

BREAK

a:
  b while c
d: e

BREAK

a: (while b then c)

BREAK

a: (while b then c)
d: e

BREAK

a:
  while b
    c

BREAK

a: (b for b in c)

BREAK

a: (b for b in c)
d: e

BREAK

a:
  b for b in c

BREAK

a: (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb for b in cccc)
d: e
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a = (b if c)

a =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb if ccccccccc

a = (b while c)

a =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb while cccccc

a = (b for b in c)

a =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb for b in ccc

a: (b if c)

BREAK

a: b if c
d: e

BREAK

d: e
a: b if c

BREAK

a:
  b if c

BREAK

a:
  b if c
d: e

BREAK

a: (b while c)

BREAK

a: b while c
d: e

BREAK

a:
  b while c

BREAK

a:
  b while c
d: e

BREAK

a: (while b then c)

BREAK

a: (while b then c)
d: e

BREAK

a: while b
  c

BREAK

a: (b for b in c)

BREAK

a: b for b in c
d: e

BREAK

a:
  b for b in c

BREAK

a:
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb for b in cccc
d: e

`;

exports[`conditional-computed-access.coffee 1`] = `
a[if b then c]

a[if b then c] = yes

a[(
  if b
    c
)]

a[b if c]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a[if b then c]

a[if b then c] = yes

a[
  if b
    c
]

a[b if c]

`;

exports[`conditional-condition.coffee 1`] = `
if (
  if a
    b
  else
    c
)
  d

unless (if a then b)
  c

c if (
  if a
    b
)

while (
  if a
    b
  else
    c
)
  d

until (if a then b)
  c

c while (
  if a
    b
)

switch (
  if a
    b
  else
    c
)
  when d then e

switch (if a then b)
  when c then d
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (
  if a
    b
  else
    c
)
  d

unless (if a then b)
  c

c if (
  if a
    b
)

while (
  if a
    b
  else
    c
)
  d

until (if a then b)
  c

c while (
  if a
    b
)

switch (
  if a
    b
  else
    c
)
  when d then e

switch (if a then b)
  when c then d

`;

exports[`if-as-postfix-body.coffee 1`] = `
method.ctor = (if @parent then 'derived' else 'base') if methodName.value is 'constructor'

(if @parent then 'derived' else 'base') if methodName.value is 'constructor'

(if @parent then 'derived' else 'base') for a in b

(if @parent then 'derived' else 'base') while x
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method.ctor = (if @parent then 'derived' else 'base') if (
  methodName.value is 'constructor'
)

(if @parent then 'derived' else 'base') if methodName.value is 'constructor'

(if @parent then 'derived' else 'base') for a in b

(if @parent then 'derived' else 'base') while x

`;

exports[`if-call-arg.coffee 1`] = `
@tokens.splice (if @tag(i - 1) is ',' then i - 1 else i), 0, outdent
@tokens.splice 0, outdent, (if @tag(i - 1) is ',' then i - 1 else i)
@tokens.splice (if @tag(i - 1) is ',' then i - 1 else i), 0, outdent, moreLongArgs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@tokens.splice (if @tag(i - 1) is ',' then i - 1 else i), 0, outdent
@tokens.splice 0, outdent, if @tag(i - 1) is ',' then i - 1 else i
@tokens.splice(
  if @tag(i - 1) is ',' then i - 1 else i
  0
  outdent
  moreLongArgs
)

`;

exports[`postfix-body.coffee 1`] = `
(x ->
  a
) if b

(y ->) if b

a b if c

(a b ->) if c

(->) if b

(->
  a
) if b

(a = ->) if b

(a = ->
  c
) if b

(a = b ->) if c

(a = b ->
  c
) if d

(a do ->
  b
) if c

(x = do ->
  y
) if z

(do x = ->
  y
) if z

(a do b = ->
  c
) if d

(a b, do ->
  c
) if d

(a e, do b = ->
  c
) if d

(a e, ->
  c
) if d

(a e, -> c) if d

(a b = ->
  c
) if d

(a e, b = ->
  c
) if d

(test 'a', ->
  b
) if c

(
  if a
    b
  else
    c
) if d

(if a then b else c) if d

(a if b then c) if d

a(
  if b
    c
) if d

(x = if a then b else c) if d

(x = if a
  b
else
  c
) if d

(x = a if b then c) if d

(x = a(
  if b
    c
)) if d

(a do if b then c else d) if e

(a do if b
  c
else
  d
) if e

(do a = if b then c else d) if e

(do a =
  if b
    c
  else
    d
) if e

(a do b = if c then d else e) if f

(a do b =
  if c
    d
  else
    e
) if f

(a g, do b = if c then d else e) if f

(a g, do b =
  if c
    d
  else
    e
) if f

(a b, if c then d) if f

(a b,
  if c
    d
) if f

(a b, x = if c then d) if e

(a b,
  x = if c
    d
) if e

(a b, do if c then d else e) if f

(a b, do if c
  d
else
  e
) if f

(try a) if b

(
  try
    a
  catch
    d
) if b
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(x ->
  a
) if b

(y ->) if b

a b if c

(a b ->) if c

(->) if b

(->
  a
) if b

(a = ->) if b

(a = ->
  c
) if b

(a = b ->) if c

(a = b ->
  c
) if d

(a do ->
  b
) if c

(x = do ->
  y
) if z

(do x = ->
  y
) if z

a(
  do b = ->
    c
) if d

(a b, do ->
  c
) if d

a(
  e
  do b = ->
    c
) if d

(a e, ->
  c
) if d

(a e, -> c) if d

a(
  (b = ->
    c
  )
) if d

a(
  e
  (b = ->
    c
  )
) if d

(test 'a', ->
  b
) if c

(
  if a
    b
  else
    c
) if d

(if a then b else c) if d

a if b then c if d

a(
  if b
    c
) if d

x = (if a then b else c) if d

x = (
  if a
    b
  else
    c
) if d

x = a if b then c if d

x = a(
  if b
    c
) if d

a do (if b then c else d) if e

a(
  do (
    if b
      c
    else
      d
  )
) if e

do a = if b then c else d if e

do a = if b
  c
else
  d if e

a do b = if c then d else e if f

a(
  do b = if c
    d
  else
    e
) if f

a g, do b = if c then d else e if f

a(
  g
  do b = if c
    d
  else
    e
) if f

a b, if c then d if f

a b,
  if c
    d if f

a b, (x = if c then d) if e

a(
  b
  (x = if c
    d)
) if e

a b, do (if c then d else e) if f

a(
  b
  do (
    if c
      d
    else
      e
  )
) if f

try a if b

try
  a
catch
  d if b

`;

exports[`spread-control-structure.coffee 1`] = `
{
  ...(
    if a
      b
  )
}

{
  ...(
    for a in b
      c
  )
}

{
  ...(
    while a
      b
  )
}

[
  ...(
    switch a
      when b then c
  )
]

{
  ...(
    try
      a
  )
}

<A {
  ...(
    if a
      b
  )
} />

<A {
  ...(
    for a in b
      c
  )
} />

<A {
  ...(
    while a
      b
  )
} />

<A {
  ...(
    switch a
      when b then c
  )
} />

<A {...(
  try
    a
)} />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  ...(
    if a
      b
  )
}

{
  ...(
    for a in b
      c
  )
}

{
  ...(
    while a
      b
  )
}

[
  ...(
    switch a
      when b then c
  )
]

{
  ...(
    try
      a
  )
}

<A
  {...(
    if a
      b
  )}
/>

<A
  {...(
    for a in b
      c
  )}
/>

<A
  {...(
    while a
      b
  )}
/>

<A
  {...(
    switch a
      when b then c
  )}
/>

<A
  {...(
    try
      a
  )}
/>

`;

exports[`try-as-condition.coffee 1`] = `
if (try a)
  b

if (try a) then b

b if try a

b if (try a catch b then c)

if (
  try
    b
)
  c

c unless (
  try
    b
)

while (try a)
  b

while (try a) then b

b while try a

b while (try a catch b then c)

while (
  try
    b
)
  c

c until (
  try
    b
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (try a)
  b

if (try a) then b

b if try a

b if (try a catch b then c)

if (
  try
    b
)
  c

c unless (
  try
    b
)

while (try a)
  b

while (try a) then b

b while try a

b while (try a catch b then c)

while (
  try
    b
)
  c

c until (
  try
    b
)

`;

exports[`try-as-operand.coffee 1`] = `
(try a) is b

(try a catch then b) + c

a + try b

(try b)?

not try b

(try a) and b

(try
  a
) is b

a is (
  try
    b
  catch
    c
)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(try a) is b

(try a catch then b) + c

a + try b

(try b)?

not try b

(try a) and b

(
  try
    a
) is b

a is
  try
    b
  catch
    c

`;
