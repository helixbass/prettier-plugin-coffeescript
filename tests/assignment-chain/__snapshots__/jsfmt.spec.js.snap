// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`chain.coffee 1`] = `
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccc

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccc

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[cccccccccccccccccc]

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[cccccccccccccccccc]

aaaaaaaaa = bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff

aaaaaaaaa: bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff

aaaaaaaaa = bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa: bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa = bbbbbbbb.ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa: bbbbbbbb.ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

a = b.c (d) ->
  e

ruleTester.run "#{ruleName}:strict", rule,
  valid: [...alwaysValid].map(ruleOptionsMapperFactory strictOptions).map(parserOptionsMapper)
  invalid: [...neverValid].map(ruleOptionsMapperFactory strictOptions).map parserOptionsMapper
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccc

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccc

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[cccccccccccccccccc]

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[cccccccccccccccccc]

aaaaaaaaa = bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee
  .fffffffffffffffffffffffff

aaaaaaaaa:
  bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff

aaaaaaaaa = bbbbbbbb()
  .ccccccccc(-> d)
  .eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa:
  bbbbbbbb()
    .ccccccccc(-> d)
    .eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa = bbbbbbbb
  .ccccccccc(-> d)
  .eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa:
  bbbbbbbb
    .ccccccccc(-> d)
    .eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

a = b.c (d) ->
  e

ruleTester.run "#{ruleName}:strict", rule,
  valid:
    [...alwaysValid]
      .map(ruleOptionsMapperFactory strictOptions)
      .map(parserOptionsMapper)
  invalid:
    [...neverValid]
      .map(ruleOptionsMapperFactory strictOptions)
      .map parserOptionsMapper

`;

exports[`chain.coffee 2`] = `
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccc

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccc

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[cccccccccccccccccc]

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[cccccccccccccccccc]

aaaaaaaaa = bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff

aaaaaaaaa: bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff

aaaaaaaaa = bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa: bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa = bbbbbbbb.ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa: bbbbbbbb.ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

a = b.c (d) ->
  e

ruleTester.run "#{ruleName}:strict", rule,
  valid: [...alwaysValid].map(ruleOptionsMapperFactory strictOptions).map(parserOptionsMapper)
  invalid: [...neverValid].map(ruleOptionsMapperFactory strictOptions).map parserOptionsMapper
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccc

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccc

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa =
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[cccccccccccccccccc]

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[cccccccccccccccccc]

aaaaaaaaa =
  bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff

aaaaaaaaa:
  bbbbbbbb().ccccccccc(-> d).eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff

aaaaaaaaa =
  bbbbbbbb()
  .ccccccccc(-> d)
  .eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa:
  bbbbbbbb()
  .ccccccccc(-> d)
  .eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa =
  bbbbbbbb
  .ccccccccc(-> d)
  .eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

aaaaaaaaa:
  bbbbbbbb
  .ccccccccc(-> d)
  .eeeeeeeeeeeeeeeeeeeeeeee.fffffffffffffffffffffffff()

a = b.c (d) ->
  e

ruleTester.run "#{ruleName}:strict", rule,
  valid:
    [...alwaysValid]
    .map(ruleOptionsMapperFactory strictOptions)
    .map(parserOptionsMapper)
  invalid:
    [...neverValid]
    .map(ruleOptionsMapperFactory strictOptions)
    .map parserOptionsMapper

`;
