- how do elisions and breaking arrays interplay?
- make comma option less naive (eg either omit or dedent comma if the arg has indentation eg breaking function or control)
- where to draw the line with what to parenthesize when splatting - you can omit a lot of parens but it looks weird eg [(a if f)?.b ? []...]
- don't need to parenthesize postfix for comprehensions (and probably other things?) when assignment breaks eg:
  array2 =
    (a + b for [a, b] from [[10, 20], [30, 40], [50, 60]] when a + b >= 70)
  this is kind of similar to needing to preserve breaking in certain cases since there's a semantic difference eg a = b if null vs
  a =
    b if null
  i guess you could achieve the same thing with parenthesization but seems nice to support this
- revisit bracketSpacing logic
- nicely break/indent interpolated expressions that will themselves break, eg chains are ugly
- should it preserve tab character inside regexp?
- shouldGroupLast on heregex
- watch out for the difference between single-property object with postfix conditional:
  a: b if c
  vs
  a:
    b if c
- preserve switch then alignment?
- places where can't safely use implicit object when comma isnt 'none'? eg when followed by another (implicit) object
- refine dedented comma logic so that if object is printing inline, don't print dedented comma
- now that we're trying to inline objects, should probably default to adding braces around inline nested objects
  - does that imply the need for a respect implicit object option? or should we just always try to respect what they did for nested objects?
- linebreak on other binary operators eg +?
- comments:
  - get comment-only class body to print indented
  - line comment at end of switch case body is outdenting to the next when line
- update to support flow() etc formatting
- add arrays to respectBreak?
- this:
  operatorToken = sourceCode.getFirstTokenBetween node.left, node.right, (
    token
  ) -> token.value is node.operator
  should break differently
- output isn't stable when it generates a dedented-comma object in a broken array with a spacing line (before?)
- comment was disappearing:
  loop # eslint-disable-line no-constant-condition
    switch currentName.type
- another unstable output:
  generates:
  schema: [
    enum: ['object', 'property']
  ]
  which it wants to convert to:
  schema: [enum: ['object', 'property']]
- could there be a case where not using call parens in if test could be a problem? eg if its last arg ended with a postfix if and it's an inline if?
  if a(b if c) then d
- print postfix body sequence like block eg
  (
    a b
    c
  ) for a in b

tests to copy from JS:
comments/while (add-more-comments branch)
comments_jsx_same_line/
cursor/
directives/escaped
dynamic_import/
empty_paren_comment/
