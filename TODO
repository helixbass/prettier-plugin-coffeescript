- where to draw the line with what to parenthesize when splatting - you can omit a lot of parens but it looks weird eg [(a if f)?.b ? []...]
- revisit bracketSpacing logic
- nicely break/indent interpolated expressions that will themselves break, eg chains are ugly
- should it preserve tab character inside regexp?
- shouldGroupLast on heregex
- preserve switch then alignment?
- now that we're trying to inline objects, should probably default to adding braces around inline nested objects
  - does that imply the need for a respect implicit object option? or should we just always try to respect what they did for nested objects?
- linebreak on other binary operators eg +?
- comments:
  - get comment-only class body to print indented
  - line comment at end of switch case body is outdenting to the next when line
- add arrays to respectBreak?
- this:
  operatorToken = sourceCode.getFirstTokenBetween node.left, node.right, (
    token
  ) -> token.value is node.operator
  should break differently
- output isn't stable when it generates a dedented-comma object in a broken array with a spacing line (before?)
- comment was disappearing:
  loop # eslint-disable-line no-constant-condition
    switch currentName.type
- another unstable output:
  generates:
  schema: [
    enum: ['object', 'property']
  ]
  which it wants to convert to:
  schema: [enum: ['object', 'property']]
- could there be a case where not using call parens in if test could be a problem? eg if its last arg ended with a postfix if and it's an inline if?
  if a(b if c) then d
- print postfix body sequence like block eg
  (
    a b
    c
  ) for a in b

tests to copy from JS:
comments/while (add-more-comments branch)
comments_jsx_same_line/
cursor/
directives/escaped
dynamic_import/
empty_paren_comment/
